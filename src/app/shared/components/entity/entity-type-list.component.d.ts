import { AfterViewInit, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { AliasEntityType, EntityType } from '@shared/models/entity-type.models';
import { EntityService } from '@core/http/entity.service';
import { MatAutocomplete } from '@angular/material/autocomplete';
import { MatChipGrid } from '@angular/material/chips';
import { FloatLabelType, SubscriptSizing } from '@angular/material/form-field';
import * as i0 from "@angular/core";
interface EntityTypeInfo {
    name: string;
    value: EntityType;
}
export declare class EntityTypeListComponent implements ControlValueAccessor, OnInit, AfterViewInit {
    private store;
    translate: TranslateService;
    private entityService;
    private fb;
    entityTypeListFormGroup: UntypedFormGroup;
    modelValue: Array<EntityType> | null;
    private requiredValue;
    get required(): boolean;
    label: string;
    floatLabel: FloatLabelType;
    set required(value: boolean);
    disabled: boolean;
    subscriptSizing: SubscriptSizing;
    allowedEntityTypes: Array<EntityType | AliasEntityType>;
    ignoreAuthorityFilter: boolean;
    entityTypeInput: ElementRef<HTMLInputElement>;
    entityTypeAutocomplete: MatAutocomplete;
    chipList: MatChipGrid;
    allEntityTypeList: Array<EntityTypeInfo>;
    entityTypeList: Array<EntityTypeInfo>;
    filteredEntityTypeList: Observable<Array<EntityTypeInfo>>;
    placeholder: string;
    secondaryPlaceholder: string;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(store: Store<AppState>, translate: TranslateService, entityService: EntityService, fb: UntypedFormBuilder);
    updateValidators(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<EntityType> | null): void;
    add(entityType: EntityTypeInfo): void;
    remove(entityType: EntityTypeInfo): void;
    displayEntityTypeFn(entityType?: EntityTypeInfo): string | undefined;
    fetchEntityTypes(searchText?: string): Observable<Array<EntityTypeInfo>>;
    onFocus(): void;
    clear(value?: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityTypeListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntityTypeListComponent, "tb-entity-type-list", never, { "label": "label"; "floatLabel": "floatLabel"; "required": "required"; "disabled": "disabled"; "subscriptSizing": "subscriptSizing"; "allowedEntityTypes": "allowedEntityTypes"; "ignoreAuthorityFilter": "ignoreAuthorityFilter"; }, {}, never, never, false, never>;
}
export {};
