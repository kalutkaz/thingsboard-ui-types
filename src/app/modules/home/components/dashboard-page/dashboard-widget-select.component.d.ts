import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { WidgetsBundle } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/widgets-bundle.model';
import { IAliasController } from '../../../../../../../thingsboard/ui-ngx/src/app/core/api/widget-api.models';
import { WidgetService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/widget.service';
import { WidgetInfo, widgetType } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/widget.models';
import { BehaviorSubject, Observable } from 'rxjs';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class DashboardWidgetSelectComponent implements OnInit {
    private widgetsService;
    private sanitizer;
    private cd;
    private search$;
    private filterWidgetTypes$;
    private widgetsInfo;
    private widgetsBundleValue;
    widgetTypes: Set<widgetType>;
    widgets$: Observable<Array<WidgetInfo>>;
    loadingWidgetsSubject: BehaviorSubject<boolean>;
    loadingWidgets$: Observable<boolean>;
    widgetsBundles$: Observable<Array<WidgetsBundle>>;
    loadingWidgetBundlesSubject: BehaviorSubject<boolean>;
    loadingWidgetBundles$: Observable<boolean>;
    set widgetsBundle(widgetBundle: WidgetsBundle);
    get widgetsBundle(): WidgetsBundle;
    aliasController: IAliasController;
    set searchBundle(search: string);
    set filterWidgetTypes(widgetTypes: Array<widgetType>);
    get filterWidgetTypes(): Array<widgetType>;
    widgetSelected: EventEmitter<WidgetInfo>;
    widgetsBundleSelected: EventEmitter<WidgetsBundle>;
    constructor(widgetsService: WidgetService, sanitizer: DomSanitizer, cd: ChangeDetectorRef);
    ngOnInit(): void;
    private getWidgets;
    onWidgetClicked($event: Event, widget: WidgetInfo): void;
    isSystem(item: WidgetsBundle): boolean;
    selectBundle($event: Event, bundle: WidgetsBundle): void;
    getPreviewImage(imageUrl: string | null): SafeUrl | string;
    private getWidgetsBundle;
    private fetchWidgetBundle;
    private fetchWidget;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardWidgetSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DashboardWidgetSelectComponent, "tb-dashboard-widget-select", never, { "aliasController": "aliasController"; "searchBundle": "searchBundle"; "filterWidgetTypes": "filterWidgetTypes"; }, { "widgetSelected": "widgetSelected"; "widgetsBundleSelected": "widgetsBundleSelected"; }, never, never, false, never>;
}
