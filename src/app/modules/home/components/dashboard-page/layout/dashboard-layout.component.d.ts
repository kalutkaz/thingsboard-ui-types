import { OnDestroy, OnInit } from '@angular/core';
import { ILayoutController } from '../../../../../../../../thingsboard/ui-ngx/src/app/modules/home/components/dashboard-page/layout/layout.models';
import { DashboardContext, DashboardPageLayoutContext } from '../../../../../../../../thingsboard/ui-ngx/src/app/modules/home/components/dashboard-page/dashboard-page.models';
import { PageComponent } from '../../../../../../../../thingsboard/ui-ngx/src/app/shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '../../../../../../../../thingsboard/ui-ngx/src/app/core/core.state';
import { Widget } from '../../../../../../../../thingsboard/ui-ngx/src/app/shared/models/widget.models';
import { DashboardCallbacks, DashboardContextMenuItem, IDashboardComponent, WidgetContextMenuItem } from '../../../../../../../../thingsboard/ui-ngx/src/app/modules/home/models/dashboard-component.models';
import { Hotkey } from 'angular2-hotkeys';
import { TranslateService } from '@ngx-translate/core';
import { ItemBufferService } from '../../../../../../../../thingsboard/ui-ngx/src/app/core/services/item-buffer.service';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { TbCheatSheetComponent } from '../../../../../../../../thingsboard/ui-ngx/src/app/shared/components/cheatsheet.component';
import { TbPopoverComponent } from '../../../../../../../../thingsboard/ui-ngx/src/app/shared/components/popover.component';
import * as i0 from "@angular/core";
export declare class DashboardLayoutComponent extends PageComponent implements ILayoutController, DashboardCallbacks, OnInit, OnDestroy {
    protected store: Store<AppState>;
    private translate;
    private itembuffer;
    private sanitizer;
    layoutCtxValue: DashboardPageLayoutContext;
    dashboardStyle: {
        [klass: string]: any;
    };
    backgroundImage: SafeStyle | string;
    hotKeys: Hotkey[];
    dashboardCheatSheet: TbCheatSheetComponent;
    set layoutCtx(val: DashboardPageLayoutContext);
    get layoutCtx(): DashboardPageLayoutContext;
    dashboardCtx: DashboardContext;
    isEdit: boolean;
    isEditingWidget: boolean;
    isMobile: boolean;
    widgetEditMode: boolean;
    parentDashboard?: IDashboardComponent;
    popoverComponent?: TbPopoverComponent;
    dashboard: IDashboardComponent;
    private rxSubscriptions;
    constructor(store: Store<AppState>, translate: TranslateService, itembuffer: ItemBufferService, sanitizer: DomSanitizer);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private initHotKeys;
    private loadDashboardStyle;
    reload(): void;
    resetHighlight(): void;
    highlightWidget(widgetId: string, delay?: number): void;
    selectWidget(widgetId: string, delay?: number): void;
    addWidget($event: Event): void;
    onEditWidget($event: Event, widget: Widget): void;
    onExportWidget($event: Event, widget: Widget): void;
    onRemoveWidget($event: Event, widget: Widget): void;
    onWidgetMouseDown($event: Event, widget: Widget): void;
    onWidgetClicked($event: Event, widget: Widget): void;
    prepareDashboardContextMenu($event: Event): Array<DashboardContextMenuItem>;
    prepareWidgetContextMenu($event: Event, widget: Widget): Array<WidgetContextMenuItem>;
    copyWidget($event: Event, widget: Widget): void;
    copyWidgetReference($event: Event, widget: Widget): void;
    pasteWidget($event: Event): void;
    pasteWidgetReference($event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardLayoutComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DashboardLayoutComponent, "tb-dashboard-layout", never, { "dashboardCheatSheet": "dashboardCheatSheet"; "layoutCtx": "layoutCtx"; "dashboardCtx": "dashboardCtx"; "isEdit": "isEdit"; "isEditingWidget": "isEditingWidget"; "isMobile": "isMobile"; "widgetEditMode": "widgetEditMode"; "parentDashboard": "parentDashboard"; "popoverComponent": "popoverComponent"; }, {}, never, never, false, never>;
}
