import { EntityTableConfig } from '../../../../../../../thingsboard/ui-ngx/src/app/modules/home/models/entity/entities-table-config.models';
import { DebugEventType, Event, EventType } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/event.models';
import { TimePageLink } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/page/page-link';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { EntityId } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/id/entity-id';
import { EventService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/event.service';
import { Observable } from 'rxjs';
import { PageData } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/page/page-data';
import { DialogService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/dialog.service';
import { ContentType } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/constants';
import { Overlay } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';
export declare class EventTableConfig extends EntityTableConfig<Event, TimePageLink> {
    private eventService;
    private dialogService;
    private translate;
    private datePipe;
    private dialog;
    entityId: EntityId;
    tenantId: string;
    private defaultEventType;
    private disabledEventTypes;
    private debugEventTypes;
    private overlay;
    private viewContainerRef;
    private cd;
    eventTypeValue: EventType | DebugEventType;
    hideClearEventAction: boolean;
    private filterParams;
    private filterColumns;
    set eventType(eventType: EventType | DebugEventType);
    get eventType(): EventType | DebugEventType;
    eventTypes: Array<EventType | DebugEventType>;
    constructor(eventService: EventService, dialogService: DialogService, translate: TranslateService, datePipe: DatePipe, dialog: MatDialog, entityId: EntityId, tenantId: string, defaultEventType: EventType | DebugEventType, disabledEventTypes: Array<EventType | DebugEventType>, debugEventTypes: Array<DebugEventType>, overlay: Overlay, viewContainerRef: ViewContainerRef, cd: ChangeDetectorRef);
    clearEvents($event: any): void;
    fetchEvents(pageLink: TimePageLink): Observable<PageData<Event>>;
    updateColumns(updateTableColumns?: boolean): void;
    showContent($event: MouseEvent, content: string, title: string, contentType?: ContentType, sortKeys?: boolean): void;
    private updateFilterColumns;
    private clearFiter;
    private editEventFilter;
}
