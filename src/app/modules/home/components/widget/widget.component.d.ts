import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, ElementRef, Injector, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { DashboardWidget } from '../../../../../../../thingsboard/ui-ngx/src/app/modules/home/models/dashboard-component.models';
import { Widget, WidgetTypeParameters } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/widget.models';
import { PageComponent } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '../../../../../../../thingsboard/ui-ngx/src/app/core/core.state';
import { WidgetService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/widget.service';
import { UtilsService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/utils.service';
import { IDynamicWidgetComponent, WidgetContext, WidgetInfo, WidgetTypeInstance } from '../../../../../../../thingsboard/ui-ngx/src/app/modules/home/models/widget-component.models';
import { SubscriptionMessage, WidgetSubscriptionContext } from '../../../../../../../thingsboard/ui-ngx/src/app/core/api/widget-api.models';
import { ActivatedRoute, Router } from '@angular/router';
import { ResourcesService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/resources.service';
import { TimeService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/time.service';
import { DeviceService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/device.service';
import { ExceptionData } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/error.models';
import { WidgetComponentService } from './widget-component.service';
import { Timewindow } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/time/time.models';
import { CancelAnimationFrame, RafService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/raf.service';
import { DashboardService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/dashboard.service';
import { EntityService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/http/entity.service';
import { EntityDataService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/api/entity-data.service';
import { TranslateService } from '@ngx-translate/core';
import { AlarmDataService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/api/alarm-data.service';
import { MatDialog } from '@angular/material/dialog';
import { ComponentType } from '@angular/cdk/portal';
import { MobileService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/mobile.service';
import { DialogService } from '../../../../../../../thingsboard/ui-ngx/src/app/core/services/dialog.service';
import { TbPopoverService } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/components/popover.service';
import { IModulesMap } from '../../../../../../../thingsboard/ui-ngx/src/app/modules/common/modules-map.models';
import * as i0 from "@angular/core";
export declare class WidgetComponent extends PageComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    protected store: Store<AppState>;
    private route;
    private router;
    private widgetComponentService;
    private componentFactoryResolver;
    private elementRef;
    private injector;
    private dialog;
    private renderer;
    private popoverService;
    private embedDashboardDialogComponent;
    private dashboardPageComponent;
    private modulesMap;
    private widgetService;
    private resources;
    private timeService;
    private deviceService;
    private entityService;
    private dashboardService;
    private entityDataService;
    private alarmDataService;
    private translate;
    private utils;
    private mobileService;
    private dialogs;
    private raf;
    private ngZone;
    private cd;
    widgetTitlePanel: TemplateRef<any>;
    isEdit: boolean;
    isMobile: boolean;
    dashboardWidget: DashboardWidget;
    widgetContentContainer: ViewContainerRef;
    widget: Widget;
    widgetInfo: WidgetInfo;
    errorMessages: string[];
    widgetContext: WidgetContext;
    widgetType: any;
    typeParameters: WidgetTypeParameters;
    widgetTypeInstance: WidgetTypeInstance;
    widgetErrorData: ExceptionData;
    loadingData: boolean;
    displayNoData: boolean;
    noDataDisplayMessageText: string;
    dynamicWidgetComponentRef: ComponentRef<IDynamicWidgetComponent>;
    dynamicWidgetComponent: IDynamicWidgetComponent;
    subscriptionContext: WidgetSubscriptionContext;
    subscriptionInited: boolean;
    destroyed: boolean;
    widgetSizeDetected: boolean;
    widgetInstanceInited: boolean;
    dataUpdatePending: boolean;
    latestDataUpdatePending: boolean;
    pendingMessage: SubscriptionMessage;
    cafs: {
        [cafId: string]: CancelAnimationFrame;
    };
    toastTargetId: string;
    private widgetResize$;
    private cssParser;
    private rxSubscriptions;
    constructor(store: Store<AppState>, route: ActivatedRoute, router: Router, widgetComponentService: WidgetComponentService, componentFactoryResolver: ComponentFactoryResolver, elementRef: ElementRef, injector: Injector, dialog: MatDialog, renderer: Renderer2, popoverService: TbPopoverService, embedDashboardDialogComponent: ComponentType<any>, dashboardPageComponent: ComponentType<any>, modulesMap: IModulesMap, widgetService: WidgetService, resources: ResourcesService, timeService: TimeService, deviceService: DeviceService, entityService: EntityService, dashboardService: DashboardService, entityDataService: EntityDataService, alarmDataService: AlarmDataService, translate: TranslateService, utils: UtilsService, mobileService: MobileService, dialogs: DialogService, raf: RafService, ngZone: NgZone, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private displayWidgetInstance;
    private onDestroy;
    onTimewindowChanged(timewindow: Timewindow): void;
    private loadFromWidgetInfo;
    private detectChanges;
    private isReady;
    private onInit;
    private onResize;
    private onEditModeChanged;
    private onMobileModeChanged;
    private reInit;
    private reInitImpl;
    private initialize;
    private destroyDynamicWidgetComponent;
    private handleWidgetException;
    private displayMessage;
    private clearMessage;
    private configureDynamicWidgetComponent;
    private createSubscription;
    private createSubscriptionFromInfo;
    private defaultComponentsOptions;
    private createDefaultSubscription;
    private getActionDescriptors;
    private handleWidgetAction;
    private handleMobileAction;
    private handleWidgetMobileActionError;
    private openDashboardStateInPopover;
    private openDashboardStateInSeparateDialog;
    private elementClick;
    private cardClick;
    private loadCustomActionResources;
    private processResourcesLoadErrors;
    private getActiveEntityInfo;
    private checkSize;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetComponent, [null, null, null, null, null, null, null, null, null, null, null, null, { optional: true; }, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetComponent, "tb-widget", never, { "widgetTitlePanel": "widgetTitlePanel"; "isEdit": "isEdit"; "isMobile": "isMobile"; "dashboardWidget": "dashboardWidget"; }, {}, never, never, false, never>;
}
