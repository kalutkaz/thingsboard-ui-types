import { BaseData, HasId } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/base-data';
import { PageComponent } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/components/page.component';
import { AfterViewInit, OnInit, QueryList } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '../../../../../../../thingsboard/ui-ngx/src/app/core/core.state';
import { EntityTableConfig } from '../../../../../../../thingsboard/ui-ngx/src/app/modules/home/models/entity/entities-table-config.models';
import { MatTab } from '@angular/material/tabs';
import { Authority } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/authority.enum';
import { AuthUser } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/user.model';
import { EntityType } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/entity-type.models';
import { AuditLogMode } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/audit-log.models';
import { DebugEventType, EventType } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/event.models';
import { AttributeScope, LatestTelemetry } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/telemetry/telemetry.models';
import { UntypedFormGroup } from '@angular/forms';
import { PageLink } from '../../../../../../../thingsboard/ui-ngx/src/app/shared/models/page/page-link';
import * as i0 from "@angular/core";
export declare abstract class EntityTabsComponent<T extends BaseData<HasId>, P extends PageLink = PageLink, L extends BaseData<HasId> = T, C extends EntityTableConfig<T, P, L> = EntityTableConfig<T, P, L>> extends PageComponent implements OnInit, AfterViewInit {
    protected store: Store<AppState>;
    attributeScopes: typeof AttributeScope;
    latestTelemetryTypes: typeof LatestTelemetry;
    authorities: typeof Authority;
    entityTypes: typeof EntityType;
    auditLogModes: typeof AuditLogMode;
    eventTypes: typeof EventType;
    debugEventTypes: typeof DebugEventType;
    authUser: AuthUser;
    nullUid: string;
    entityValue: T;
    entitiesTableConfigValue: C;
    entityTabs: QueryList<MatTab>;
    isEditValue: boolean;
    set isEdit(isEdit: boolean);
    get isEdit(): boolean;
    set entity(entity: T);
    get entity(): T;
    set entitiesTableConfig(entitiesTableConfig: C);
    get entitiesTableConfig(): C;
    detailsForm: UntypedFormGroup;
    private entityTabsSubject;
    entityTabsChanged: import("rxjs").Observable<MatTab[]>;
    protected constructor(store: Store<AppState>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    protected setEntity(entity: T): void;
    protected setEntitiesTableConfig(entitiesTableConfig: C): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityTabsComponent<any, any, any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<EntityTabsComponent<any, any, any, any>, never, never, { "isEdit": "isEdit"; "entity": "entity"; "entitiesTableConfig": "entitiesTableConfig"; "detailsForm": "detailsForm"; }, {}, never, never, false, never>;
}
