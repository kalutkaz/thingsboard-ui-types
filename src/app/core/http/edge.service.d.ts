import { RequestConfig } from './http-utils';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PageLink, TimePageLink } from '../../../../../thingsboard/ui-ngx/src/app/shared/models/page/page-link';
import { PageData } from '../../../../../thingsboard/ui-ngx/src/app/shared/models/page/page-data';
import { EntitySubtype } from '../../../../../thingsboard/ui-ngx/src/app/shared/models/entity-type.models';
import { Edge, EdgeEvent, EdgeInfo, EdgeInstallInstructions, EdgeSearchQuery } from '../../../../../thingsboard/ui-ngx/src/app/shared/models/edge.models';
import { EntityId } from '../../../../../thingsboard/ui-ngx/src/app/shared/models/id/entity-id';
import { BulkImportRequest, BulkImportResult } from '../../../../../thingsboard/ui-ngx/src/app/modules/home/components/import-export/import-export.models';
import * as i0 from "@angular/core";
export declare class EdgeService {
    private http;
    constructor(http: HttpClient);
    getEdges(edgeIds: Array<string>, config?: RequestConfig): Observable<Array<Edge>>;
    getEdge(edgeId: string, config?: RequestConfig): Observable<Edge>;
    getEdgeInfo(edgeId: string, config?: RequestConfig): Observable<EdgeInfo>;
    saveEdge(edge: Edge, config?: RequestConfig): Observable<Edge>;
    deleteEdge(edgeId: string, config?: RequestConfig): Observable<Object>;
    getEdgeTypes(config?: RequestConfig): Observable<Array<EntitySubtype>>;
    getCustomerEdgeInfos(customerId: string, pageLink: PageLink, type?: string, config?: RequestConfig): Observable<PageData<EdgeInfo>>;
    assignEdgeToCustomer(customerId: string, edgeId: string, config?: RequestConfig): Observable<Edge>;
    unassignEdgeFromCustomer(edgeId: string, config?: RequestConfig): Observable<Object>;
    makeEdgePublic(edgeId: string, config?: RequestConfig): Observable<Edge>;
    getTenantEdgeInfos(pageLink: PageLink, type?: string, config?: RequestConfig): Observable<PageData<EdgeInfo>>;
    findByQuery(query: EdgeSearchQuery, config?: RequestConfig): Observable<Array<Edge>>;
    getEdgeEvents(entityId: EntityId, pageLink: TimePageLink, config?: RequestConfig): Observable<PageData<EdgeEvent>>;
    syncEdge(edgeId: string, config?: RequestConfig): Observable<Object>;
    findMissingToRelatedRuleChains(edgeId: string, config?: RequestConfig): Observable<string>;
    findByName(edgeName: string, config?: RequestConfig): Observable<Edge>;
    bulkImportEdges(entitiesData: BulkImportRequest, config?: RequestConfig): Observable<BulkImportResult>;
    getEdgeDockerInstallInstructions(edgeId: string, config?: RequestConfig): Observable<EdgeInstallInstructions>;
    static ɵfac: i0.ɵɵFactoryDeclaration<EdgeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EdgeService>;
}
